<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on Sam Stelfox</title>
    <link>https://stelfox.net/tags/rust/</link>
    <description>Recent content in rust on Sam Stelfox</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>sam@stelfox.net (Sam Stelfox)</managingEditor>
    <webMaster>sam@stelfox.net (Sam Stelfox)</webMaster>
    <lastBuildDate>Mon, 31 Jul 2023 07:38:29 -0400</lastBuildDate><atom:link href="https://stelfox.net/tags/rust/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust/TypeScript Type Synchronization</title>
      <link>https://stelfox.net/blog/2023/07/rust/typescript-type-synchronization/</link>
      <pubDate>Mon, 31 Jul 2023 07:38:29 -0400</pubDate>
      <author>sam@stelfox.net (Sam Stelfox)</author>
      <guid>https://stelfox.net/blog/2023/07/rust/typescript-type-synchronization/</guid>
      <description>I&amp;rsquo;ve been looking at integrating a React front-end with a Rust API server and one of the ongoing annoyances I encountered was keeping API types in sync with each other. I found a couple of options, the smallest and simplest one I liked was tsync.
I try to keep my dependency lists small, and this crate is a bit of an odd duck as it is only really doing work as a build dependency.</description>
    </item>
    
    <item>
      <title>Combining &#34;Subscribers&#34; in Rust&#39;s Tracing Library</title>
      <link>https://stelfox.net/blog/2023/04/combining-subscribers-in-rusts-tracing-library/</link>
      <pubDate>Thu, 13 Apr 2023 20:51:02 -0400</pubDate>
      <author>sam@stelfox.net (Sam Stelfox)</author>
      <guid>https://stelfox.net/blog/2023/04/combining-subscribers-in-rusts-tracing-library/</guid>
      <description>Tracing is a fantastic Rust library that I&amp;rsquo;ve found immensely useful, but I feel its documentation and API could still use a bit of polish. At first glance, the distinctions and roles of Subscribers, Layers, Filters, and Writers seem clear and well-documented. But when dealing with less common use cases, understanding their interactions and handling trait-based errors can become challenging.
So, I&amp;rsquo;m thinking I need multiple &amp;ldquo;Subscribers&amp;rdquo; for the various events being traced, right?</description>
    </item>
    
  </channel>
</rss>
