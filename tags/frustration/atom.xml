<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Frustration - Sam Stelfox&#39;s Thoughts &amp; Notes</title>
    <link>https://stelfox.net/tags/frustration/</link>
    <description>Recent content in Frustration - Sam Stelfox&#39;s Thoughts &amp; Notes</description>
    <language>en-US</language>
    <managingEditor>Sam Stelfox</managingEditor>
    <webMaster>Sam Stelfox</webMaster><atom:link href="https://stelfox.net/tags/frustration/atom.xml" rel="self" type="application/rss+xml" /><item>
      <title>Parsing HTTP Responses in Ruby</title>
      <link>https://stelfox.net/blog/2018/05/parsing-http-responses-in-ruby/</link>
      <pubDate>Wed, 23 May 2018 07:53:19 -0600</pubDate>
      <author>Sam Stelfox</author>
      <guid>https://stelfox.net/blog/2018/05/parsing-http-responses-in-ruby/</guid>
      <description>Normally handling HTTP responses in Ruby is rather straight forward. There is a native library in Ruby that handles HTTP requests which parses the responses into a neat data structure that you can then operate on. What if you want to work on stored HTTP responses outside of a connection though? This was the situation I found myself in and thanks to a series of unusual decisions in the Ruby core library I found myself left out in the cold.</description>
    </item></channel>
</rss>
