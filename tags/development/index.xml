<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development on Sam Stelfox</title><link>https://stelfox.net/tags/development/</link><description>Recent content in Development on Sam Stelfox</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Thu, 18 Feb 2016 15:46:12 -0500</lastBuildDate><atom:link href="https://stelfox.net/tags/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Sharing Context Between Dependent Rake Tasks</title><link>https://stelfox.net/blog/sharing-context-between-dependent-rake-tasks/</link><pubDate>Thu, 18 Feb 2016 15:46:12 -0500</pubDate><guid>https://stelfox.net/blog/sharing-context-between-dependent-rake-tasks/</guid><description>I use Rakefiles quite a bit like traditional Makefiles, in that I specify immediate dependencies for an individual task and Rake will execute all of them. If a file or directory is the dependency and it exists, the task that creates it will be skipped. A contrived Rakefile example might look like:
file &amp;#39;sample&amp;#39; do |t| puts &amp;#39;Creating sample directory&amp;#39; Dir.mkdir(t.name) end file &amp;#39;sample/population.txt&amp;#39; =&amp;gt; [&amp;#39;sample&amp;#39;] do |t| puts &amp;#39;Creating sample population file.</description></item><item><title>Ruby Code Quality Metrics</title><link>https://stelfox.net/blog/ruby-code-quality-metrics/</link><pubDate>Wed, 22 Apr 2015 16:47:10 -0400</pubDate><guid>https://stelfox.net/blog/ruby-code-quality-metrics/</guid><description>I like getting unopinionated feedback on the quality of the code I write. Sometimes I can get this from other developers but they tend to get annoyed being asked after every commit whether they consider it an improvement.
There are a few utilities for Ruby codebases such as flay, flog, and rubocop as well as hosted services such as Code Climate that can help you identify chunks of code that can use some work.</description></item><item><title>Extracting Content From Markdown</title><link>https://stelfox.net/blog/extracting-content-from-markdown/</link><pubDate>Fri, 30 May 2014 18:34:29 -0400</pubDate><guid>https://stelfox.net/blog/extracting-content-from-markdown/</guid><description>Recently I&amp;rsquo;ve been playing around with building a pure javascript full text search engine for static content sites like this one. One of the challenges with doing this has been working around the Markdown markup embedded in the written content.
Most of the markdown syntax can be stripped out simply by removing all non-alphanumeric characters from the document and move on. This doesn&amp;rsquo;t solve one of the bigger challenges I&amp;rsquo;ve experienced&amp;hellip; Code blocks.</description></item><item><title>Calculating RSA Key Fingerprints in Ruby</title><link>https://stelfox.net/blog/calculating-rsa-key-fingerprints-in-ruby/</link><pubDate>Mon, 21 Apr 2014 18:37:04 -0400</pubDate><guid>https://stelfox.net/blog/calculating-rsa-key-fingerprints-in-ruby/</guid><description>I regularly find myself working on projects that involve the manipulation and storage of RSA keys. In the past I&amp;rsquo;ve never had to worry about identification or presentation of these keys. Normally I&amp;rsquo;ve only got one too three pairs at most that I&amp;rsquo;m manipulating (server, certificate authority, client).
I&amp;rsquo;ve not found myself working on a project that involves presenting the certificates to users for selection and comparison. The obvious way too do this is take a page out of other developer&amp;rsquo;s books and present the key&amp;rsquo;s fingerprint.</description></item><item><title>Creating Crypt Style SHA512 Passwords With Ruby</title><link>https://stelfox.net/blog/creating-crypt-style-sha512-passwords-with-ruby/</link><pubDate>Mon, 17 Feb 2014 15:28:27 -0500</pubDate><guid>https://stelfox.net/blog/creating-crypt-style-sha512-passwords-with-ruby/</guid><description>I needed to generate crypt-style SHA512 passwords in ruby for an /etc/shadow file. After a bunch of Googling and messing around with the OpenSSL library I finally found a very simple built-in way to handle this.
require &amp;#39;securerandom&amp;#39; &amp;#39;password&amp;#39;.crypt(&amp;#39;$6$&amp;#39; + SecureRandom.random_number(36 ** 8).to_s(36)) You&amp;rsquo;ll get a string that looks like:
$6$4dksjo1b$Lt194Dwy7r/7WbM8MezYZysmGcxjaiisgTrTBbHkyBZFXeqQTG0J5hep4wLM/AmYxlGNLRy0OWATLDZCqjwCk. If you don&amp;rsquo;t want to use the SecureRandom module you can replace the random call with simply rand(36 ** 8) though this isn&amp;rsquo;t recommended.</description></item><item><title>Access GET Parameters With Coffeescript</title><link>https://stelfox.net/blog/access-get-parameters-with-coffeescript/</link><pubDate>Sat, 07 Dec 2013 18:20:58 -0500</pubDate><guid>https://stelfox.net/blog/access-get-parameters-with-coffeescript/</guid><description>I&amp;rsquo;ve been working on a pure javascript based search engine for this static website and needed to access a get parameter within the URL.
I found a few solutions online but they usually made use of jQuery or weren&amp;rsquo;t in coffeescript. A few others would only extract an individual named parameter at a time. The following will return all of them in Javascript&amp;rsquo;s equivalent of a hash (or dictionary if you prefer) in the form of an object.</description></item><item><title>Ruby's Option Parser - a More Complete Example</title><link>https://stelfox.net/blog/rubys-option-parser-a-more-complete-example/</link><pubDate>Sun, 02 Dec 2012 22:59:00 -0500</pubDate><guid>https://stelfox.net/blog/rubys-option-parser-a-more-complete-example/</guid><description>Recently while writing a Ruby program I needed to parse some command line options. Helpfully Ruby provides a module named OptionParser to make this easy. I found a few parts of the documentation ambiguous and a few others down right confusing.
The catch I hit was the required field. In my mind the definition of a required argument is something that needs to be passed on the command line to continue.</description></item><item><title>CarrierWave, S3 and Filenames</title><link>https://stelfox.net/blog/carrierwave-s3-and-filenames/</link><pubDate>Thu, 09 Aug 2012 20:00:57 +0000</pubDate><guid>https://stelfox.net/blog/carrierwave-s3-and-filenames/</guid><description>This is going to be a real quick post. I&amp;rsquo;m using the &amp;ldquo;carrier_wave&amp;rdquo; gem with &amp;ldquo;fog&amp;rdquo; for one of my projects and found that when a file is stored on S3 the &amp;ldquo;identifier&amp;rdquo;, and &amp;ldquo;filename&amp;rdquo; methods return nil. I got around this issue in two separate ways neither of which I&amp;rsquo;m particularly happy about.
Outside of the uploader, you can use the File utility and the URL of the object to get the base filename like so:</description></item><item><title>Security Through Obesity</title><link>https://stelfox.net/blog/security-through-obesity/</link><pubDate>Wed, 08 Aug 2012 15:06:56 +0000</pubDate><guid>https://stelfox.net/blog/security-through-obesity/</guid><description>Jeremy Spilman recently proposed changes to how user&amp;rsquo;s hashes are stored in website&amp;rsquo;s and companies databases. This post was originally going to look at some of the issues involved in the scheme he envisioned, however, he rather quickly posted a followup article with a well thought out solution that countered all of the issues that other people and myself were able to come up with. I&amp;rsquo;d strongly recommend reading both if you haven&amp;rsquo;t done so.</description></item><item><title>Adding a Table Prefix to DataMapper Tables</title><link>https://stelfox.net/blog/adding-a-table-prefix-to-datamapper-tables/</link><pubDate>Tue, 07 Aug 2012 14:09:33 +0000</pubDate><guid>https://stelfox.net/blog/adding-a-table-prefix-to-datamapper-tables/</guid><description>So I recently encountered a situation where I needed to define a prefix on the tables used by the &amp;ldquo;data_mapper&amp;rdquo; gem. When I went searching I found quite a bit of information about similar projects in Python, and PHP named DataMapper but nothing about the ruby &amp;ldquo;data_mapper&amp;rdquo;. The search continued eventually ending in my reading through the source of the data_mapper gem only to find that there was no feature for simply defining a prefix.</description></item></channel></rss>